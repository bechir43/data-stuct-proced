PROCEDURE dot_product(V1,V2: ARRAY_OF FLOAT[3], VAR ps: FLOAT)

VAR
    i : INTEGER;
BEGIN
    Read(V1);
    Read(V2);
    
    FOR i FROM 0 TO V1.length-1 DO
        ps := ps + V1[i] * V2[i];
    END_FOR

    Write(ps)
END

ALGORITHM DOT_PRODUCT
VAR
    vectors: ARRAY_OF (ARRAY_OF FLOAT[3])[4]:= [[1, -1, 7], [7, -7, 0], [9, 0, -9], [0, 0, 0]];
    j, k: INTEGER;
    dp: FLOAT:= 0;
BEGIN

    FOR k FROM 0 TO vectors.length-2 DO
        FOR j FROM k+1 TO vectors.length DO
            IF (vectors[k].length = vectors[j].length) THEN
                dot_product(vectors[k],vectors[j], dp);
                IF (dp = 0) THEN
                    Write(vectors[k], ' and ', vectors[j], ' are orthogonal');
                ELSE
                    Write(vectors[k], ' and ', vectors[j], ' are not orthogonal');
                END_IF
            ELSE
                Write(vectors[k], " and ", vectors[j], " Don't have the same length.");
            END_IF
        END_FOR
    END_FOR
END



// OUTPUT:
// vectors = [[1, -1, 7], [7, -7, 0], [9, 0, -9], [0, 0, 0]]

// k= 0 and j= 1
// Dot product = 14
// [ 1, -1, 7 ] and [ 7, -7, 0 ] are not orthogonal

// k= 0 and j= 2
// Dot product= -54
// [ 1, -1, 7 ] and [ 9, 0, -9 ] are not orthogonal

// k= 0 and j= 3
// Dot product= 0
// [ 1, -1, 7 ] and [ 0, 0, 0 ] are orthogonal

// k= 1 and j= 2
// Dot product= 63
// [ 7, -7, 0 ] and [ 9, 0, -9 ] are not orthogonal

// k= 1 and j= 3
// Dot product= 0
// [ 7, -7, 0 ] and [ 0, 0, 0 ] are orthogonal

// k= 2 and j= 3
// Dot product= 0
// [ 9, 0, -9 ] and [ 0, 0, 0 ] are orthogonal